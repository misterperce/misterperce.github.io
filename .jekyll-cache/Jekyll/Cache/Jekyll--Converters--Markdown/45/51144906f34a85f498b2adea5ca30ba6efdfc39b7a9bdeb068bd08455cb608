I"A&<h2 id="introduction">Introduction</h2>

<p>As a Python Pandas enthusiast who owns some stock in a Robinhood account, it seemed natural to me to try to play around with my own financial data in a Jupyter Notebook. It’s very doable, but Robinhood doesn’t make it too user-friendly.</p>

<p>The two main hurdles that I had to spend some time navigating were:</p>
<ol>
  <li>
    <p>Getting a data download of my portfolio positions, which involves rendering and downloading a .json response file (something I hadn’t done before)</p>
  </li>
  <li>
    <p>Robinhood’s .json file doesn’t explicitly have the stock symbols in the data, but rather has API urls per stock symbol. I had to write a loop to read the urls, extract the stock symbol, and then join the symbol name back to the original DataFrame.</p>
  </li>
</ol>

<h2 id="getting-the-json-response">Getting the .json Response</h2>

<p>Credit goes to this <a href="https://medium.com/@bartclaeys/how-to-export-your-robinhood-stocks-fc8245b3d118">Medium post</a>, where I learned how to do this.</p>

<p>Instructions:
Log on to Robinhood via web browser and navigate to your account portfolio. This is found under Account → History.</p>

<p>Next, open the console viewer (for Chrome: right click the background of the page → Inspect) and go to the Network view (highlighted in the image).</p>

<p><img src="/assets/post-imgs/robinhood-network-view.PNG" alt="img" /></p>

<p>Now, you’ll need to refresh the webpage (so that the Network console can pick up the full page load). Find an <code class="highlighter-rouge">orders/</code> file, right click it, and select “Copy Response”. This will put the json resonse in your computer’s clipboard.</p>

<p>From here, open a text editor, paste the response, and save it as a .json file locally. I called my file <code class="highlighter-rouge">robinhood_response.</code></p>

<h2 id="importing-into-python-pandas">Importing into Python Pandas</h2>

<p>I use pandas’s included packages <code class="highlighter-rouge">read_json</code> and <code class="highlighter-rouge">json_normalize</code> and extracted the datapoints that I wanted into my DataFrame, <code class="highlighter-rouge">robinhood_response</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># read json
</span><span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="s">'robinhood_response.json'</span><span class="p">)</span>
<span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">json_normalize</span><span class="p">(</span><span class="n">robinhood_response</span><span class="p">[</span><span class="s">'results'</span><span class="p">])</span>

<span class="c1"># reset to only columns of interest
</span><span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">robinhood_response</span><span class="p">[[</span><span class="s">'last_transaction_at'</span><span class="p">,</span> <span class="s">'side'</span><span class="p">,</span><span class="s">'instrument'</span><span class="p">,</span><span class="s">'average_price'</span><span class="p">,</span><span class="s">'quantity'</span><span class="p">]]</span>
</code></pre></div></div>
<h2 id="translating-instrument-urls">Translating Instrument URLs</h2>

<p>In order to translate the intrument urls into the standardized stock symbols, I first pull the unique list of instruments to look up:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pull unique instruments for translation to symbol
</span><span class="n">instrument_urls</span> <span class="o">=</span> <span class="n">robinhood_response</span><span class="p">[[</span><span class="s">'instrument'</span><span class="p">]]</span>
<span class="n">instrument_urls</span> <span class="o">=</span> <span class="n">instrument_urls</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div></div>

<p>Next, I loop through the list of urls, open each one, find the symbol in the json from the URL, and append it to a list. I then take the list of translations and left join (or ‘vlookup’, if you’re more familiar with Excel) it back to the original DataFrame, <code class="highlighter-rouge">robinhood_response</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># translate instrument URLs to symbol
</span><span class="n">instrument_translation</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">instrument_urls</span><span class="o">.</span><span class="n">size</span><span class="p">):</span>
    <span class="n">loop_url</span> <span class="o">=</span><span class="n">instrument_urls</span><span class="o">.</span><span class="n">iat</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">loop_request</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">loop_url</span><span class="p">)</span>
    <span class="n">loop_read</span> <span class="o">=</span> <span class="n">loop_request</span><span class="o">.</span><span class="n">text</span>
    <span class="n">loop_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="n">loop_read</span><span class="p">,</span><span class="n">typ</span><span class="o">=</span><span class="s">'series'</span><span class="p">)</span>
    <span class="n">loop_symbol</span> <span class="o">=</span> <span class="n">loop_df</span><span class="p">[</span><span class="s">'symbol'</span><span class="p">]</span>
    <span class="n">instrument_translation</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">loop_url</span><span class="p">,</span><span class="n">loop_symbol</span><span class="p">])</span>

<span class="n">instrument_translation_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">instrument_translation</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'url'</span><span class="p">,</span><span class="s">'symbol'</span><span class="p">])</span>
<span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">robinhood_response</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'instrument'</span><span class="p">:</span> <span class="s">'url'</span><span class="p">})</span>
<span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">robinhood_response</span><span class="p">,</span> <span class="n">instrument_translation_df</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'url'</span><span class="p">)</span>
<span class="n">robinhood_response</span> <span class="o">=</span> <span class="n">robinhood_response</span><span class="p">[[</span><span class="s">'last_transaction_at'</span><span class="p">,</span><span class="s">'side'</span><span class="p">,</span><span class="s">'symbol'</span><span class="p">,</span><span class="s">'quantity'</span><span class="p">,</span><span class="s">'average_price'</span><span class="p">]]</span>
<span class="n">robinhood_response</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">morgan</span><span class="o">.</span><span class="n">columns</span>
<span class="n">robinhood_response</span><span class="p">[</span><span class="s">'date'</span><span class="p">]</span><span class="o">=</span><span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">robinhood_response</span><span class="p">[</span><span class="s">'date'</span><span class="p">])</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">date</span>
<span class="n">robinhood_response</span><span class="p">[[</span><span class="s">'units'</span><span class="p">,</span><span class="s">'price'</span><span class="p">]]</span> <span class="o">=</span> <span class="n">robinhood_response</span><span class="p">[[</span><span class="s">'units'</span><span class="p">,</span><span class="s">'price'</span><span class="p">]]</span><span class="o">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">to_numeric</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="s">'coerce'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
:ET